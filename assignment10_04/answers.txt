function filterOutOdds() {
  return [...arguments].filter(num => num % 2 === 0)
}

function findMin() {
  return [...arguments].reduce((acc, n) => acc < n ? acc : n, 0)
}

function mergeObjects(a, b) {
  return { ...a, ...b }
}

function doubleAndReturnArgs(arr, ...args) {
  return [...arr, ...args.map(n => 2 * n)]
}

// Slice and Dice!

/** remove a random element in the items array
  and return a new array without that item. */

function removeRandom(items) {
  const randomIdx = Math.floor(items.length * Math.random())
  return [...items.slice(0, randomIdx), ...items.slice(randomIdx + 1)]
}

/** Return a new array with every item in array1 and array2. */

function extend(array1, array2) {
  return [...array1, ...array2]
}

/** Return a new object with all the keys and values
from obj and a new key/value pair */

function addKeyVal(obj, key, val) {
  return { ...obj, [key]: val }
}


/** Return a new object with a key removed. */

function removeKey(obj, key) {
  const newObj = { ...obj }
  delete newObj[key]
  return newObj
}


/** Combine two objects and return a new object. */

function combine(obj1, obj2) {
  return { ...obj1, ...obj2 }
}


/** Return a new object with a modified key and value. */

function update(obj, key, val) {
  return { ...obj, [key]: val }
}